// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sf/blockmeta/v2/blockmeta.proto

package pbbmsrvconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/streamingfast/blockmeta-service/server/pb/sf/blockmeta/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BlockName is the fully-qualified name of the Block service.
	BlockName = "sf.blockmeta.v2.Block"
	// BlockByTimeName is the fully-qualified name of the BlockByTime service.
	BlockByTimeName = "sf.blockmeta.v2.BlockByTime"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BlockNumToIDProcedure is the fully-qualified name of the Block's NumToID RPC.
	BlockNumToIDProcedure = "/sf.blockmeta.v2.Block/NumToID"
	// BlockIDToNumProcedure is the fully-qualified name of the Block's IDToNum RPC.
	BlockIDToNumProcedure = "/sf.blockmeta.v2.Block/IDToNum"
	// BlockHeadProcedure is the fully-qualified name of the Block's Head RPC.
	BlockHeadProcedure = "/sf.blockmeta.v2.Block/Head"
	// BlockByTimeAtProcedure is the fully-qualified name of the BlockByTime's At RPC.
	BlockByTimeAtProcedure = "/sf.blockmeta.v2.BlockByTime/At"
	// BlockByTimeAfterProcedure is the fully-qualified name of the BlockByTime's After RPC.
	BlockByTimeAfterProcedure = "/sf.blockmeta.v2.BlockByTime/After"
	// BlockByTimeBeforeProcedure is the fully-qualified name of the BlockByTime's Before RPC.
	BlockByTimeBeforeProcedure = "/sf.blockmeta.v2.BlockByTime/Before"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	blockServiceDescriptor            = v2.File_sf_blockmeta_v2_blockmeta_proto.Services().ByName("Block")
	blockNumToIDMethodDescriptor      = blockServiceDescriptor.Methods().ByName("NumToID")
	blockIDToNumMethodDescriptor      = blockServiceDescriptor.Methods().ByName("IDToNum")
	blockHeadMethodDescriptor         = blockServiceDescriptor.Methods().ByName("Head")
	blockByTimeServiceDescriptor      = v2.File_sf_blockmeta_v2_blockmeta_proto.Services().ByName("BlockByTime")
	blockByTimeAtMethodDescriptor     = blockByTimeServiceDescriptor.Methods().ByName("At")
	blockByTimeAfterMethodDescriptor  = blockByTimeServiceDescriptor.Methods().ByName("After")
	blockByTimeBeforeMethodDescriptor = blockByTimeServiceDescriptor.Methods().ByName("Before")
)

// BlockClient is a client for the sf.blockmeta.v2.Block service.
type BlockClient interface {
	NumToID(context.Context, *connect.Request[v2.NumToIDReq]) (*connect.Response[v2.BlockResp], error)
	IDToNum(context.Context, *connect.Request[v2.IDToNumReq]) (*connect.Response[v2.BlockResp], error)
	Head(context.Context, *connect.Request[v2.Empty]) (*connect.Response[v2.BlockResp], error)
}

// NewBlockClient constructs a client for the sf.blockmeta.v2.Block service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBlockClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BlockClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &blockClient{
		numToID: connect.NewClient[v2.NumToIDReq, v2.BlockResp](
			httpClient,
			baseURL+BlockNumToIDProcedure,
			connect.WithSchema(blockNumToIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		iDToNum: connect.NewClient[v2.IDToNumReq, v2.BlockResp](
			httpClient,
			baseURL+BlockIDToNumProcedure,
			connect.WithSchema(blockIDToNumMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		head: connect.NewClient[v2.Empty, v2.BlockResp](
			httpClient,
			baseURL+BlockHeadProcedure,
			connect.WithSchema(blockHeadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// blockClient implements BlockClient.
type blockClient struct {
	numToID *connect.Client[v2.NumToIDReq, v2.BlockResp]
	iDToNum *connect.Client[v2.IDToNumReq, v2.BlockResp]
	head    *connect.Client[v2.Empty, v2.BlockResp]
}

// NumToID calls sf.blockmeta.v2.Block.NumToID.
func (c *blockClient) NumToID(ctx context.Context, req *connect.Request[v2.NumToIDReq]) (*connect.Response[v2.BlockResp], error) {
	return c.numToID.CallUnary(ctx, req)
}

// IDToNum calls sf.blockmeta.v2.Block.IDToNum.
func (c *blockClient) IDToNum(ctx context.Context, req *connect.Request[v2.IDToNumReq]) (*connect.Response[v2.BlockResp], error) {
	return c.iDToNum.CallUnary(ctx, req)
}

// Head calls sf.blockmeta.v2.Block.Head.
func (c *blockClient) Head(ctx context.Context, req *connect.Request[v2.Empty]) (*connect.Response[v2.BlockResp], error) {
	return c.head.CallUnary(ctx, req)
}

// BlockHandler is an implementation of the sf.blockmeta.v2.Block service.
type BlockHandler interface {
	NumToID(context.Context, *connect.Request[v2.NumToIDReq]) (*connect.Response[v2.BlockResp], error)
	IDToNum(context.Context, *connect.Request[v2.IDToNumReq]) (*connect.Response[v2.BlockResp], error)
	Head(context.Context, *connect.Request[v2.Empty]) (*connect.Response[v2.BlockResp], error)
}

// NewBlockHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBlockHandler(svc BlockHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	blockNumToIDHandler := connect.NewUnaryHandler(
		BlockNumToIDProcedure,
		svc.NumToID,
		connect.WithSchema(blockNumToIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	blockIDToNumHandler := connect.NewUnaryHandler(
		BlockIDToNumProcedure,
		svc.IDToNum,
		connect.WithSchema(blockIDToNumMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	blockHeadHandler := connect.NewUnaryHandler(
		BlockHeadProcedure,
		svc.Head,
		connect.WithSchema(blockHeadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/sf.blockmeta.v2.Block/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BlockNumToIDProcedure:
			blockNumToIDHandler.ServeHTTP(w, r)
		case BlockIDToNumProcedure:
			blockIDToNumHandler.ServeHTTP(w, r)
		case BlockHeadProcedure:
			blockHeadHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBlockHandler returns CodeUnimplemented from all methods.
type UnimplementedBlockHandler struct{}

func (UnimplementedBlockHandler) NumToID(context.Context, *connect.Request[v2.NumToIDReq]) (*connect.Response[v2.BlockResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sf.blockmeta.v2.Block.NumToID is not implemented"))
}

func (UnimplementedBlockHandler) IDToNum(context.Context, *connect.Request[v2.IDToNumReq]) (*connect.Response[v2.BlockResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sf.blockmeta.v2.Block.IDToNum is not implemented"))
}

func (UnimplementedBlockHandler) Head(context.Context, *connect.Request[v2.Empty]) (*connect.Response[v2.BlockResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sf.blockmeta.v2.Block.Head is not implemented"))
}

// BlockByTimeClient is a client for the sf.blockmeta.v2.BlockByTime service.
type BlockByTimeClient interface {
	At(context.Context, *connect.Request[v2.TimeReq]) (*connect.Response[v2.BlockResp], error)
	After(context.Context, *connect.Request[v2.RelativeTimeReq]) (*connect.Response[v2.BlockResp], error)
	Before(context.Context, *connect.Request[v2.RelativeTimeReq]) (*connect.Response[v2.BlockResp], error)
}

// NewBlockByTimeClient constructs a client for the sf.blockmeta.v2.BlockByTime service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBlockByTimeClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BlockByTimeClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &blockByTimeClient{
		at: connect.NewClient[v2.TimeReq, v2.BlockResp](
			httpClient,
			baseURL+BlockByTimeAtProcedure,
			connect.WithSchema(blockByTimeAtMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		after: connect.NewClient[v2.RelativeTimeReq, v2.BlockResp](
			httpClient,
			baseURL+BlockByTimeAfterProcedure,
			connect.WithSchema(blockByTimeAfterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		before: connect.NewClient[v2.RelativeTimeReq, v2.BlockResp](
			httpClient,
			baseURL+BlockByTimeBeforeProcedure,
			connect.WithSchema(blockByTimeBeforeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// blockByTimeClient implements BlockByTimeClient.
type blockByTimeClient struct {
	at     *connect.Client[v2.TimeReq, v2.BlockResp]
	after  *connect.Client[v2.RelativeTimeReq, v2.BlockResp]
	before *connect.Client[v2.RelativeTimeReq, v2.BlockResp]
}

// At calls sf.blockmeta.v2.BlockByTime.At.
func (c *blockByTimeClient) At(ctx context.Context, req *connect.Request[v2.TimeReq]) (*connect.Response[v2.BlockResp], error) {
	return c.at.CallUnary(ctx, req)
}

// After calls sf.blockmeta.v2.BlockByTime.After.
func (c *blockByTimeClient) After(ctx context.Context, req *connect.Request[v2.RelativeTimeReq]) (*connect.Response[v2.BlockResp], error) {
	return c.after.CallUnary(ctx, req)
}

// Before calls sf.blockmeta.v2.BlockByTime.Before.
func (c *blockByTimeClient) Before(ctx context.Context, req *connect.Request[v2.RelativeTimeReq]) (*connect.Response[v2.BlockResp], error) {
	return c.before.CallUnary(ctx, req)
}

// BlockByTimeHandler is an implementation of the sf.blockmeta.v2.BlockByTime service.
type BlockByTimeHandler interface {
	At(context.Context, *connect.Request[v2.TimeReq]) (*connect.Response[v2.BlockResp], error)
	After(context.Context, *connect.Request[v2.RelativeTimeReq]) (*connect.Response[v2.BlockResp], error)
	Before(context.Context, *connect.Request[v2.RelativeTimeReq]) (*connect.Response[v2.BlockResp], error)
}

// NewBlockByTimeHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBlockByTimeHandler(svc BlockByTimeHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	blockByTimeAtHandler := connect.NewUnaryHandler(
		BlockByTimeAtProcedure,
		svc.At,
		connect.WithSchema(blockByTimeAtMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	blockByTimeAfterHandler := connect.NewUnaryHandler(
		BlockByTimeAfterProcedure,
		svc.After,
		connect.WithSchema(blockByTimeAfterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	blockByTimeBeforeHandler := connect.NewUnaryHandler(
		BlockByTimeBeforeProcedure,
		svc.Before,
		connect.WithSchema(blockByTimeBeforeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/sf.blockmeta.v2.BlockByTime/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BlockByTimeAtProcedure:
			blockByTimeAtHandler.ServeHTTP(w, r)
		case BlockByTimeAfterProcedure:
			blockByTimeAfterHandler.ServeHTTP(w, r)
		case BlockByTimeBeforeProcedure:
			blockByTimeBeforeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBlockByTimeHandler returns CodeUnimplemented from all methods.
type UnimplementedBlockByTimeHandler struct{}

func (UnimplementedBlockByTimeHandler) At(context.Context, *connect.Request[v2.TimeReq]) (*connect.Response[v2.BlockResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sf.blockmeta.v2.BlockByTime.At is not implemented"))
}

func (UnimplementedBlockByTimeHandler) After(context.Context, *connect.Request[v2.RelativeTimeReq]) (*connect.Response[v2.BlockResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sf.blockmeta.v2.BlockByTime.After is not implemented"))
}

func (UnimplementedBlockByTimeHandler) Before(context.Context, *connect.Request[v2.RelativeTimeReq]) (*connect.Response[v2.BlockResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sf.blockmeta.v2.BlockByTime.Before is not implemented"))
}
