syntax = "proto3";
package sf.blockmeta.v2;
import "google/protobuf/timestamp.proto";

option go_package = "github.com/streamingfast/blockmeta-service/server/pb/sf/blockmeta/v2;pbbmsrv";

//## Overview

//The Block Meta Service API provides a set of gRPC services for querying blockchain block metadata. It enables users to retrieve block IDs using block numbers,
// convert block IDs to block numbers, fetch the latest block information, and query blocks by specific timestamps.

service Block {
  //The Block service offers functionalities to map block numbers to block IDs, block IDs to their corresponding block numbers, and to retrieve the latest block information.

  //NumToID(NumToIDReq): Given a block number, returns the block ID, number, and timestamp.
  //IDToNum(IDToNumReq): Given a block ID, returns the block ID, number, and timestamp.
  //Head(Empty): Returns the latest block's ID, number, and timestamp.

  rpc NumToID (NumToIDReq) returns (BlockResp);
  rpc IDToNum(IDToNumReq) returns (BlockResp);
  rpc Head(Empty) returns (BlockResp);
}

message Empty {}

// The BlockByTime service provides capabilities to query block information based on specific timestamps.
service BlockByTime {
  // At(TimeReq): Returns the block at a specified timestamp.
  rpc At (TimeReq) returns (BlockResp);
  // After(RelativeTimeReq): Returns the first block after a specified timestamp (or the block at the specified timestamp if it exists, if the query is inclusive).
  rpc After (RelativeTimeReq) returns (BlockResp);
  // Before(RelativeTimeReq): Returns the last block before a specified timestamp (or the block at the specified timestamp if it exists, if the query is inclusive).
  rpc Before (RelativeTimeReq) returns (BlockResp);
}

// Block Requests
message NumToIDReq {
  uint64 blockNum = 1;
}

message IDToNumReq {
  string blockID = 1;
}

// Block & BlockByTime Responses
message BlockResp {
  string id = 1;
  uint64 num = 2;
  google.protobuf.Timestamp time = 3;
}

// BlockByTime Requests
message TimeReq {
  google.protobuf.Timestamp time = 1;
}

message RelativeTimeReq {
  // The relative time request is used to query block information after or before a specific timestamp.
  // It include a boolean flag to indicate if the query is inclusive or not (if the block at the specified timestamp should be included in the response or not).

  google.protobuf.Timestamp time = 1;
  bool inclusive = 2;
}

//## Endpoints
//
//To interact with the Block Meta Service, clients should use the gRPC endpoints provided by streamingFast for all the chains
//

//## Example Query and Response
//
//### Querying block information using a block number
//
//```
//grpcurl -proto server/proto/sf/blockmeta/v2/blockmeta.proto   -d '{"blockNum": "501"}' holesky.eth.streamingfast.io:443 sf.blockmeta.v2.Block/NumToID
//```
//
//```json
//{
//"id": "00cd01a162b0bc1e9a88eb8718891dd31984f3fb64c2392570d310d8a5f05bf6",
//"num": "501",
//"time": "2023-09-28T14:16:24Z"
//}
//```
//
//### Querying block information using a block ID
//
//```
//grpcurl -proto server/proto/sf/blockmeta/v2/blockmeta.proto  -d '{"blockID": "0000000046887292a76cd113a5fd6af38b17c9fb77e5936cd9856694030598f9"}' mainnet.btc.streamingfast.io:443 sf.blockmeta.v2.Block/IDToNum
//```
//
//```json
//{
//"id": "0000000046887292a76cd113a5fd6af38b17c9fb77e5936cd9856694030598f9",
//"num": "501",
//"time": "2009-01-14T21:38:31Z"
//}
//```
//
//### Querying head block information
//
//```
//grpcurl -proto ./proto/sf/blockmeta/v2/blockmeta.proto  holesky.eth.streamingfast.io:443 sf.blockmeta.v2.Block/Head
//```
//
//```json
//{
//"id": "50446fbfca349144a5346106038c1865e753cf138db9d3f6ef25224f75c198e9",
//"num": "931897",
//"time": "2024-02-12T22:12:24Z"
//}
//```
//
//### Querying block information at a specific timestamp
//
//```
//grpcurl -proto ./proto/sf/blockmeta/v2/blockmeta.proto -d '{"time": "2024-02-12T19:17:23Z"}' mainnet.eth.streamingfast.io:443 sf.blockmeta.v2.BlockByTime/At
//
//```
//
//```json
//{
//"id": "1cddf333f43b88edb8dcf30861542f13297e3e5a90fd03ec044926c3440ea748",
//"num": "19213975",
//"time": "2024-02-12T19:17:23Z"
//}
//```
//
//### Querying block information after a specific timestamp by setting inclusive to true
//
//```
//grpcurl -proto server/proto/sf/blockmeta/v2/blockmeta.proto -d '{"time": "2024-02-12T19:17:23Z", "inclusive": "true"}' mainnet.eth.streamingfast.io:443 sf.blockmeta.v2.BlockByTime/After
//```
//
//```json
//{
//"id": "1cddf333f43b88edb8dcf30861542f13297e3e5a90fd03ec044926c3440ea748",
//"num": "19213975",
//"time": "2024-02-12T19:17:23Z"
//}
//```
//### Querying block information before a specific timestamp by setting inclusive to false
//
//```
//grpcurl -proto server/proto/sf/blockmeta/v2/blockmeta.proto -d '{"time": "2024-02-12T19:17:23Z", "inclusive": "false"}' mainnet.eth.streamingfast.io:443 sf.blockmeta.v2.BlockByTime/Before```
//```
//
//```json
//{
//"id": "4132f03a2c4bf07be79b0d99e7d21aa2cdf71486b415e6031c0b3a28fd33fe2a",
//"num": "19213974",
//"time": "2024-02-12T19:17:11Z"
//}
//```
