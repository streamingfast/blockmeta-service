// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: sf/blockmeta/v2/blockmeta.proto

package pbbmsrv

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockClient is the client API for Block service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockClient interface {
	NumToID(ctx context.Context, in *NumToIDReq, opts ...grpc.CallOption) (*BlockResp, error)
	IDToNum(ctx context.Context, in *IDToNumReq, opts ...grpc.CallOption) (*BlockResp, error)
	Head(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BlockResp, error)
}

type blockClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockClient(cc grpc.ClientConnInterface) BlockClient {
	return &blockClient{cc}
}

func (c *blockClient) NumToID(ctx context.Context, in *NumToIDReq, opts ...grpc.CallOption) (*BlockResp, error) {
	out := new(BlockResp)
	err := c.cc.Invoke(ctx, "/sf.blockmeta.v2.Block/NumToID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) IDToNum(ctx context.Context, in *IDToNumReq, opts ...grpc.CallOption) (*BlockResp, error) {
	out := new(BlockResp)
	err := c.cc.Invoke(ctx, "/sf.blockmeta.v2.Block/IDToNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) Head(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BlockResp, error) {
	out := new(BlockResp)
	err := c.cc.Invoke(ctx, "/sf.blockmeta.v2.Block/Head", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockServer is the server API for Block service.
// All implementations should embed UnimplementedBlockServer
// for forward compatibility
type BlockServer interface {
	NumToID(context.Context, *NumToIDReq) (*BlockResp, error)
	IDToNum(context.Context, *IDToNumReq) (*BlockResp, error)
	Head(context.Context, *Empty) (*BlockResp, error)
}

// UnimplementedBlockServer should be embedded to have forward compatible implementations.
type UnimplementedBlockServer struct {
}

func (UnimplementedBlockServer) NumToID(context.Context, *NumToIDReq) (*BlockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NumToID not implemented")
}
func (UnimplementedBlockServer) IDToNum(context.Context, *IDToNumReq) (*BlockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IDToNum not implemented")
}
func (UnimplementedBlockServer) Head(context.Context, *Empty) (*BlockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Head not implemented")
}

// UnsafeBlockServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockServer will
// result in compilation errors.
type UnsafeBlockServer interface {
	mustEmbedUnimplementedBlockServer()
}

func RegisterBlockServer(s grpc.ServiceRegistrar, srv BlockServer) {
	s.RegisterService(&Block_ServiceDesc, srv)
}

func _Block_NumToID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumToIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).NumToID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sf.blockmeta.v2.Block/NumToID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).NumToID(ctx, req.(*NumToIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_IDToNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDToNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).IDToNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sf.blockmeta.v2.Block/IDToNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).IDToNum(ctx, req.(*IDToNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_Head_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).Head(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sf.blockmeta.v2.Block/Head",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).Head(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Block_ServiceDesc is the grpc.ServiceDesc for Block service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Block_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sf.blockmeta.v2.Block",
	HandlerType: (*BlockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NumToID",
			Handler:    _Block_NumToID_Handler,
		},
		{
			MethodName: "IDToNum",
			Handler:    _Block_IDToNum_Handler,
		},
		{
			MethodName: "Head",
			Handler:    _Block_Head_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sf/blockmeta/v2/blockmeta.proto",
}

// BlockByTimeClient is the client API for BlockByTime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockByTimeClient interface {
	At(ctx context.Context, in *TimeReq, opts ...grpc.CallOption) (*BlockResp, error)
	After(ctx context.Context, in *RelativeTimeReq, opts ...grpc.CallOption) (*BlockResp, error)
	Before(ctx context.Context, in *RelativeTimeReq, opts ...grpc.CallOption) (*BlockResp, error)
}

type blockByTimeClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockByTimeClient(cc grpc.ClientConnInterface) BlockByTimeClient {
	return &blockByTimeClient{cc}
}

func (c *blockByTimeClient) At(ctx context.Context, in *TimeReq, opts ...grpc.CallOption) (*BlockResp, error) {
	out := new(BlockResp)
	err := c.cc.Invoke(ctx, "/sf.blockmeta.v2.BlockByTime/At", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockByTimeClient) After(ctx context.Context, in *RelativeTimeReq, opts ...grpc.CallOption) (*BlockResp, error) {
	out := new(BlockResp)
	err := c.cc.Invoke(ctx, "/sf.blockmeta.v2.BlockByTime/After", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockByTimeClient) Before(ctx context.Context, in *RelativeTimeReq, opts ...grpc.CallOption) (*BlockResp, error) {
	out := new(BlockResp)
	err := c.cc.Invoke(ctx, "/sf.blockmeta.v2.BlockByTime/Before", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockByTimeServer is the server API for BlockByTime service.
// All implementations should embed UnimplementedBlockByTimeServer
// for forward compatibility
type BlockByTimeServer interface {
	At(context.Context, *TimeReq) (*BlockResp, error)
	After(context.Context, *RelativeTimeReq) (*BlockResp, error)
	Before(context.Context, *RelativeTimeReq) (*BlockResp, error)
}

// UnimplementedBlockByTimeServer should be embedded to have forward compatible implementations.
type UnimplementedBlockByTimeServer struct {
}

func (UnimplementedBlockByTimeServer) At(context.Context, *TimeReq) (*BlockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method At not implemented")
}
func (UnimplementedBlockByTimeServer) After(context.Context, *RelativeTimeReq) (*BlockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method After not implemented")
}
func (UnimplementedBlockByTimeServer) Before(context.Context, *RelativeTimeReq) (*BlockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Before not implemented")
}

// UnsafeBlockByTimeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockByTimeServer will
// result in compilation errors.
type UnsafeBlockByTimeServer interface {
	mustEmbedUnimplementedBlockByTimeServer()
}

func RegisterBlockByTimeServer(s grpc.ServiceRegistrar, srv BlockByTimeServer) {
	s.RegisterService(&BlockByTime_ServiceDesc, srv)
}

func _BlockByTime_At_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockByTimeServer).At(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sf.blockmeta.v2.BlockByTime/At",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockByTimeServer).At(ctx, req.(*TimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockByTime_After_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelativeTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockByTimeServer).After(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sf.blockmeta.v2.BlockByTime/After",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockByTimeServer).After(ctx, req.(*RelativeTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockByTime_Before_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelativeTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockByTimeServer).Before(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sf.blockmeta.v2.BlockByTime/Before",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockByTimeServer).Before(ctx, req.(*RelativeTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockByTime_ServiceDesc is the grpc.ServiceDesc for BlockByTime service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockByTime_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sf.blockmeta.v2.BlockByTime",
	HandlerType: (*BlockByTimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "At",
			Handler:    _BlockByTime_At_Handler,
		},
		{
			MethodName: "After",
			Handler:    _BlockByTime_After_Handler,
		},
		{
			MethodName: "Before",
			Handler:    _BlockByTime_Before_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sf/blockmeta/v2/blockmeta.proto",
}
